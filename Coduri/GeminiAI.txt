package com.example.projekt;

import android.content.Context;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import org.json.JSONArray;
import org.json.JSONObject;

public class GeminiAI {
    private static GeminiAI instance;

    public FileWriter fw;
    private final String apiKey = "AIzaSyCtTXp90iOqvo9BDWpf3Y-4eSof8bPBwqg";
    private final OkHttpClient client = new OkHttpClient();
    private Context context;
    public String ledBucatarieStatus;
    public String ledBaieStatus;
    public static synchronized GeminiAI getInstance(Context context) throws IOException {
        if (instance == null) {
            instance = new GeminiAI(context);
        }
        return instance;
    }
    public GeminiAI(Context context2) throws IOException {
        this.context = context2; ledBucatarieStatus = "000000"; ledBaieStatus = "000000";
        fw = new FileWriter(new File(context.getFilesDir(), "command_log.txt"), true);
    }

    public void sendPrompt(String str, final GeminiCallback geminiCallback) throws IOException {
        new OkHttpClient().newCall(new Request.Builder().url("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=" + this.apiKey).post(RequestBody.create(MediaType.parse("application/json; charset=utf-8"), "{\n  \"contents\": [\n    {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"text\": \"" + trainText() + str + "\"\n        }\n      ]\n    }\n  ]\n}")).build()).enqueue(new Callback() {
            public void onFailure(Call call, IOException iOException) {
                geminiCallback.onResponseReceived("Eroare rețea: " + iOException.getMessage());
            }

            public void onResponse(Call call, Response response) throws IOException {
                if (response.isSuccessful()) {
                    String r3 = GeminiAI.this.extractContentFromResponse(response.body().string());
                    geminiCallback.onResponseReceived(r3);
                    GeminiAI.sendHexCode(r3);
                    return;
                }
                geminiCallback.onResponseReceived("Eroare API: " + response.code() + " - " + response.message());
            }
        });
    }

    public String extractContentFromResponse(String str) {
        try {
            JSONArray jSONArray = new JSONObject(str).getJSONArray("candidates");
            if (jSONArray.length() <= 0) {
                return "Nu am primit răspuns.";
            }
            JSONArray jSONArray2 = jSONArray.getJSONObject(0).getJSONObject("content").getJSONArray("parts");
            if (jSONArray2.length() > 0) {
                return jSONArray2.getJSONObject(0).getString("text");
            }
            return "Nu am primit răspuns.";
        } catch (Exception e) {
            return "Eroare parsare răspuns: " + e.getMessage();
        }
    }

    static void sendHexCode(final String str) {
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    HttpURLConnection httpURLConnection = (HttpURLConnection) new URL("http://192.168.1.224/color?hex=" + str).openConnection();
                    httpURLConnection.setRequestMethod("GET");
                    httpURLConnection.setDoInput(true);
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()));
                    StringBuilder sb = new StringBuilder();
                    String readLine;
                    while ((readLine = bufferedReader.readLine()) != null) {
                        sb.append(readLine);
                    }
                    bufferedReader.close();
                    httpURLConnection.disconnect();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    static /* synthetic */ void lambda$sendHexCode$0(String str) {
        try {
            HttpURLConnection httpURLConnection = (HttpURLConnection) new URL("http://192.168.1.224/color?hex=" + str).openConnection();
            httpURLConnection.setRequestMethod("GET");
            httpURLConnection.setDoInput(true);
            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream()));
            StringBuilder sb = new StringBuilder();
            while (true) {
                String readLine = bufferedReader.readLine();
                if (readLine != null) {
                    sb.append(readLine);
                } else {
                    bufferedReader.close();
                    httpURLConnection.disconnect();
                    return;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String trainText() throws IOException {
        InputStream open = this.context.getAssets().open("trainText.txt");
        Scanner scanner = new Scanner(open);
        String str = "";
        String ledStatus = "Status bec bucatarie: " + ledBucatarieStatus + " Status bec baie: " + ledBaieStatus + "/n";
        while (scanner.hasNextLine()) {
            str = str + scanner.nextLine();
        }
        scanner.close();
        open.close();
        return ledStatus + str;
    }
}
